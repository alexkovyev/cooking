"""Этот самый высокоуровневый модуль. Работает постоянно при наличии питания.
ВОПРОС: как запускается py файл при повторном включении питания, входит ли это в рамки этой работы

Функционал:
1. запускает работу киоска, выклюает его по расписанию. ВОПРОС: где берет настройки, как часто обновляет настройки,
время системы или общее, нужно ли синхонизировать локальное время или "не наша забота"
Что включает в себя запуск: нужно ли подавать сигнал SS на смену заставок, каким то контроллерам о переходе
из режима ожидания в работу? Или это в тестировании оборудования? А телевизоры?

2. обеспечивает асинхронных websocket-ов для "общения" с web-сайтом
ВОПРОС: сокет-сервер всегда работает?
web-сайт может отправить следующие команды:
- Киоск включись  (приоритет выше, чем у расписания)
- Коиск выключись? ВОПРОС: делаем или нет, нужны или какие то сообщения о том,что мы во всю готовим пиццу и так далее
- Отключение доступности оборудования (какого? печи?)
- загрузка файлов с сайта? где лежат файлы: на внешнем облаке или внутри в какой то директори?
- приостановка работы (pause for service). Что должно работать, что нет
- включение после чрезвычайной ситуации. Что включает в себя?
- ВОПРОС: изменения расписания работы?
есть ли ееще какие то команды от web -сайта, которые мы должны обработать

3. Нужно ли делать какую то локальную версию чтобы можно было что то сделать, если нет интернета

4. Взаимодействие с кнопкой KILL SWITCH есть ли? и что должно делать? Чем отличается от Hard turn off?

Запуск работы киоска включает в себя:
- старт тестирования узлов
- мойка?
- запуск старой версии PBM (готовь или танцуй)

Выключение работы включает в себя:
- выгрузка каких то данных в БД? Что то записывам по итогам работы
- мойка вечерняя
- перевод SS и подсветки или еще его то в режим ожидания
- "завершение задач" PBM путем отмены тасков
"""

import start_PBM as Pbm
from utils import start_testing, parse_recipes


def pause_cooking():
    """Для остановки системы необходимо запустить эту функцию SSC"""
    Pbm.pause_cooking()


def main():
    """это наброски ssc"""
    # какая то нужна информация контроллерам, если не нужно, удаляем

    test_result, equipment_data = start_testing()
    recipes = parse_recipes()
    if test_result and recipes:
        cooking = Pbm.start(equipment_data, recipes)
    else:
        raise ValueError("Оборудование неисправно, нельзя работать")


if __name__ == "__main__":
    main()
